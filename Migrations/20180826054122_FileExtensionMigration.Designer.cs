// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PictIt.Models;

namespace PictIt.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180826054122_FileExtensionMigration")]
    partial class FileExtensionMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastAccessed");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiResourceId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiResourceClaim");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiResourceId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiResourceProperty");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiResourceId");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("Emphasize");

                    b.Property<string>("Name");

                    b.Property<bool>("Required");

                    b.Property<bool>("ShowInDiscoveryDocument");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiScope");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiScopeId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApiScopeId");

                    b.ToTable("ApiScopeClaim");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiResourceId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiSecret");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbsoluteRefreshTokenLifetime");

                    b.Property<int>("AccessTokenLifetime");

                    b.Property<int>("AccessTokenType");

                    b.Property<bool>("AllowAccessTokensViaBrowser");

                    b.Property<bool>("AllowOfflineAccess");

                    b.Property<bool>("AllowPlainTextPkce");

                    b.Property<bool>("AllowRememberConsent");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken");

                    b.Property<bool>("AlwaysSendClientClaims");

                    b.Property<int>("AuthorizationCodeLifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired");

                    b.Property<string>("BackChannelLogoutUri");

                    b.Property<string>("ClientClaimsPrefix");

                    b.Property<string>("ClientId");

                    b.Property<string>("ClientName");

                    b.Property<string>("ClientUri");

                    b.Property<int?>("ConsentLifetime");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableLocalLogin");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("FrontChannelLogoutSessionRequired");

                    b.Property<string>("FrontChannelLogoutUri");

                    b.Property<int>("IdentityTokenLifetime");

                    b.Property<bool>("IncludeJwtId");

                    b.Property<DateTime?>("LastAccessed");

                    b.Property<string>("LogoUri");

                    b.Property<string>("PairWiseSubjectSalt");

                    b.Property<string>("ProtocolType");

                    b.Property<int>("RefreshTokenExpiration");

                    b.Property<int>("RefreshTokenUsage");

                    b.Property<bool>("RequireClientSecret");

                    b.Property<bool>("RequireConsent");

                    b.Property<bool>("RequirePkce");

                    b.Property<int>("SlidingRefreshTokenLifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientClaim");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Origin");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientCorsOrigin");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("GrantType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientGrantType");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Provider");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientIdPRestriction");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("PostLogoutRedirectUri");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPostLogoutRedirectUri");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientProperty");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("RedirectUri");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientRedirectUri");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Scope");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientScope");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecret");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdentityResourceId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IdentityClaim");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("Emphasize");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<bool>("Required");

                    b.Property<bool>("ShowInDiscoveryDocument");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("IdentityResources");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdentityResourceId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IdentityResourceProperty");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data");

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId");

                    b.Property<string>("Type");

                    b.HasKey("Key");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("AutoHistory");
                });

            modelBuilder.Entity("PictIt.Models.Accessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Confidence");

                    b.Property<Guid?>("FaceAttributesId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FaceAttributesId");

                    b.ToTable("Accessory");
                });

            modelBuilder.Entity("PictIt.Models.Blur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlurLevel");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("Blur");
                });

            modelBuilder.Entity("PictIt.Models.Coords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("X");

                    b.Property<decimal>("Y");

                    b.HasKey("Id");

                    b.ToTable("Coords");
                });

            modelBuilder.Entity("PictIt.Models.Emotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Anger");

                    b.Property<decimal>("Contempt");

                    b.Property<decimal>("Disgust");

                    b.Property<decimal>("Fear");

                    b.Property<decimal>("Happiness");

                    b.Property<decimal>("Neutral");

                    b.Property<decimal>("Sadness");

                    b.Property<decimal>("Surprise");

                    b.HasKey("Id");

                    b.ToTable("Emotion");
                });

            modelBuilder.Entity("PictIt.Models.Exposure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExposureLevel");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("Exposure");
                });

            modelBuilder.Entity("PictIt.Models.Face", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FaceAttributesId");

                    b.Property<string>("FaceId");

                    b.Property<Guid?>("FaceLandmarksId");

                    b.Property<Guid?>("FaceRectangleId");

                    b.HasKey("Id");

                    b.HasIndex("FaceAttributesId");

                    b.HasIndex("FaceLandmarksId");

                    b.HasIndex("FaceRectangleId");

                    b.ToTable("Face");
                });

            modelBuilder.Entity("PictIt.Models.FaceAttributes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<Guid?>("BlurId");

                    b.Property<Guid?>("EmotionId");

                    b.Property<Guid?>("ExposureId");

                    b.Property<Guid?>("FacialHairId");

                    b.Property<string>("Gender");

                    b.Property<string>("Glasses");

                    b.Property<Guid?>("HairId");

                    b.Property<Guid?>("MakeupId");

                    b.Property<Guid?>("NoiseId");

                    b.Property<Guid?>("OcclusionId");

                    b.Property<decimal>("Smile");

                    b.HasKey("Id");

                    b.HasIndex("BlurId");

                    b.HasIndex("EmotionId");

                    b.HasIndex("ExposureId");

                    b.HasIndex("FacialHairId");

                    b.HasIndex("HairId");

                    b.HasIndex("MakeupId");

                    b.HasIndex("NoiseId");

                    b.HasIndex("OcclusionId");

                    b.ToTable("FaceAttributes");
                });

            modelBuilder.Entity("PictIt.Models.FaceLandmarks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EyeLeftBottomId");

                    b.Property<Guid?>("EyeLeftInnerId");

                    b.Property<Guid?>("EyeLeftOuterId");

                    b.Property<Guid?>("EyeLeftTopId");

                    b.Property<Guid?>("EyeRightBottomId");

                    b.Property<Guid?>("EyeRightInnerId");

                    b.Property<Guid?>("EyeRightOuterId");

                    b.Property<Guid?>("EyeRightTopId");

                    b.Property<Guid?>("EyebrowLeftInnerId");

                    b.Property<Guid?>("EyebrowLeftOuterId");

                    b.Property<Guid?>("EyebrowRightInnerId");

                    b.Property<Guid?>("EyebrowRightOuterId");

                    b.Property<Guid?>("MouthLeftId");

                    b.Property<Guid?>("MouthRightId");

                    b.Property<Guid?>("NoseLeftAlarOutTipId");

                    b.Property<Guid?>("NoseLeftAlarTopId");

                    b.Property<Guid?>("NoseRightAlarOutTipId");

                    b.Property<Guid?>("NoseRightAlarTopId");

                    b.Property<Guid?>("NoseRootLeftId");

                    b.Property<Guid?>("NoseRootRightId");

                    b.Property<Guid?>("NoseTipId");

                    b.Property<Guid?>("PupilLeftId");

                    b.Property<Guid?>("PupilRightId");

                    b.Property<Guid?>("UnderLipBottomId");

                    b.Property<Guid?>("UnderLipTopId");

                    b.Property<Guid?>("UpperLipBottomId");

                    b.Property<Guid?>("UpperLipTopId");

                    b.HasKey("Id");

                    b.HasIndex("EyeLeftBottomId");

                    b.HasIndex("EyeLeftInnerId");

                    b.HasIndex("EyeLeftOuterId");

                    b.HasIndex("EyeLeftTopId");

                    b.HasIndex("EyeRightBottomId");

                    b.HasIndex("EyeRightInnerId");

                    b.HasIndex("EyeRightOuterId");

                    b.HasIndex("EyeRightTopId");

                    b.HasIndex("EyebrowLeftInnerId");

                    b.HasIndex("EyebrowLeftOuterId");

                    b.HasIndex("EyebrowRightInnerId");

                    b.HasIndex("EyebrowRightOuterId");

                    b.HasIndex("MouthLeftId");

                    b.HasIndex("MouthRightId");

                    b.HasIndex("NoseLeftAlarOutTipId");

                    b.HasIndex("NoseLeftAlarTopId");

                    b.HasIndex("NoseRightAlarOutTipId");

                    b.HasIndex("NoseRightAlarTopId");

                    b.HasIndex("NoseRootLeftId");

                    b.HasIndex("NoseRootRightId");

                    b.HasIndex("NoseTipId");

                    b.HasIndex("PupilLeftId");

                    b.HasIndex("PupilRightId");

                    b.HasIndex("UnderLipBottomId");

                    b.HasIndex("UnderLipTopId");

                    b.HasIndex("UpperLipBottomId");

                    b.HasIndex("UpperLipTopId");

                    b.ToTable("FaceLandmarks");
                });

            modelBuilder.Entity("PictIt.Models.FaceRectangle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Height");

                    b.Property<int>("Left");

                    b.Property<int>("Top");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("FaceRectangle");
                });

            modelBuilder.Entity("PictIt.Models.FacialHair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Beard");

                    b.Property<decimal>("Moustache");

                    b.Property<decimal>("Sideburns");

                    b.HasKey("Id");

                    b.ToTable("FacialHair");
                });

            modelBuilder.Entity("PictIt.Models.Hair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Bald");

                    b.Property<bool>("Invisible");

                    b.HasKey("Id");

                    b.ToTable("Hair");
                });

            modelBuilder.Entity("PictIt.Models.HairColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<decimal>("Confidence");

                    b.Property<Guid?>("HairId");

                    b.HasKey("Id");

                    b.HasIndex("HairId");

                    b.ToTable("HairColor");
                });

            modelBuilder.Entity("PictIt.Models.Makeup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("EyeMakeup");

                    b.Property<bool>("LipMakeup");

                    b.HasKey("Id");

                    b.ToTable("Makeup");
                });

            modelBuilder.Entity("PictIt.Models.Noise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NoiseLevel");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("Noise");
                });

            modelBuilder.Entity("PictIt.Models.Occlusion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("EyeOccluded");

                    b.Property<bool>("ForeheadOccluded");

                    b.Property<bool>("MouthOccluded");

                    b.HasKey("Id");

                    b.ToTable("Occlusion");
                });

            modelBuilder.Entity("PictIt.Models.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extension");

                    b.Property<Guid?>("FaceId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("PictIt.Models.Search", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("PictureId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("PictIt.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<Guid>("PersonId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "ApiScope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PictIt.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PictIt.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PictIt.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PictIt.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PictIt.Models.Accessory", b =>
                {
                    b.HasOne("PictIt.Models.FaceAttributes")
                        .WithMany("Accessories")
                        .HasForeignKey("FaceAttributesId");
                });

            modelBuilder.Entity("PictIt.Models.Face", b =>
                {
                    b.HasOne("PictIt.Models.FaceAttributes", "FaceAttributes")
                        .WithMany()
                        .HasForeignKey("FaceAttributesId");

                    b.HasOne("PictIt.Models.FaceLandmarks", "FaceLandmarks")
                        .WithMany()
                        .HasForeignKey("FaceLandmarksId");

                    b.HasOne("PictIt.Models.FaceRectangle", "FaceRectangle")
                        .WithMany()
                        .HasForeignKey("FaceRectangleId");
                });

            modelBuilder.Entity("PictIt.Models.FaceAttributes", b =>
                {
                    b.HasOne("PictIt.Models.Blur", "Blur")
                        .WithMany()
                        .HasForeignKey("BlurId");

                    b.HasOne("PictIt.Models.Emotion", "Emotion")
                        .WithMany()
                        .HasForeignKey("EmotionId");

                    b.HasOne("PictIt.Models.Exposure", "Exposure")
                        .WithMany()
                        .HasForeignKey("ExposureId");

                    b.HasOne("PictIt.Models.FacialHair", "FacialHair")
                        .WithMany()
                        .HasForeignKey("FacialHairId");

                    b.HasOne("PictIt.Models.Hair", "Hair")
                        .WithMany()
                        .HasForeignKey("HairId");

                    b.HasOne("PictIt.Models.Makeup", "Makeup")
                        .WithMany()
                        .HasForeignKey("MakeupId");

                    b.HasOne("PictIt.Models.Noise", "Noise")
                        .WithMany()
                        .HasForeignKey("NoiseId");

                    b.HasOne("PictIt.Models.Occlusion", "Occlusion")
                        .WithMany()
                        .HasForeignKey("OcclusionId");
                });

            modelBuilder.Entity("PictIt.Models.FaceLandmarks", b =>
                {
                    b.HasOne("PictIt.Models.Coords", "EyeLeftBottom")
                        .WithMany()
                        .HasForeignKey("EyeLeftBottomId");

                    b.HasOne("PictIt.Models.Coords", "EyeLeftInner")
                        .WithMany()
                        .HasForeignKey("EyeLeftInnerId");

                    b.HasOne("PictIt.Models.Coords", "EyeLeftOuter")
                        .WithMany()
                        .HasForeignKey("EyeLeftOuterId");

                    b.HasOne("PictIt.Models.Coords", "EyeLeftTop")
                        .WithMany()
                        .HasForeignKey("EyeLeftTopId");

                    b.HasOne("PictIt.Models.Coords", "EyeRightBottom")
                        .WithMany()
                        .HasForeignKey("EyeRightBottomId");

                    b.HasOne("PictIt.Models.Coords", "EyeRightInner")
                        .WithMany()
                        .HasForeignKey("EyeRightInnerId");

                    b.HasOne("PictIt.Models.Coords", "EyeRightOuter")
                        .WithMany()
                        .HasForeignKey("EyeRightOuterId");

                    b.HasOne("PictIt.Models.Coords", "EyeRightTop")
                        .WithMany()
                        .HasForeignKey("EyeRightTopId");

                    b.HasOne("PictIt.Models.Coords", "EyebrowLeftInner")
                        .WithMany()
                        .HasForeignKey("EyebrowLeftInnerId");

                    b.HasOne("PictIt.Models.Coords", "EyebrowLeftOuter")
                        .WithMany()
                        .HasForeignKey("EyebrowLeftOuterId");

                    b.HasOne("PictIt.Models.Coords", "EyebrowRightInner")
                        .WithMany()
                        .HasForeignKey("EyebrowRightInnerId");

                    b.HasOne("PictIt.Models.Coords", "EyebrowRightOuter")
                        .WithMany()
                        .HasForeignKey("EyebrowRightOuterId");

                    b.HasOne("PictIt.Models.Coords", "MouthLeft")
                        .WithMany()
                        .HasForeignKey("MouthLeftId");

                    b.HasOne("PictIt.Models.Coords", "MouthRight")
                        .WithMany()
                        .HasForeignKey("MouthRightId");

                    b.HasOne("PictIt.Models.Coords", "NoseLeftAlarOutTip")
                        .WithMany()
                        .HasForeignKey("NoseLeftAlarOutTipId");

                    b.HasOne("PictIt.Models.Coords", "NoseLeftAlarTop")
                        .WithMany()
                        .HasForeignKey("NoseLeftAlarTopId");

                    b.HasOne("PictIt.Models.Coords", "NoseRightAlarOutTip")
                        .WithMany()
                        .HasForeignKey("NoseRightAlarOutTipId");

                    b.HasOne("PictIt.Models.Coords", "NoseRightAlarTop")
                        .WithMany()
                        .HasForeignKey("NoseRightAlarTopId");

                    b.HasOne("PictIt.Models.Coords", "NoseRootLeft")
                        .WithMany()
                        .HasForeignKey("NoseRootLeftId");

                    b.HasOne("PictIt.Models.Coords", "NoseRootRight")
                        .WithMany()
                        .HasForeignKey("NoseRootRightId");

                    b.HasOne("PictIt.Models.Coords", "NoseTip")
                        .WithMany()
                        .HasForeignKey("NoseTipId");

                    b.HasOne("PictIt.Models.Coords", "PupilLeft")
                        .WithMany()
                        .HasForeignKey("PupilLeftId");

                    b.HasOne("PictIt.Models.Coords", "PupilRight")
                        .WithMany()
                        .HasForeignKey("PupilRightId");

                    b.HasOne("PictIt.Models.Coords", "UnderLipBottom")
                        .WithMany()
                        .HasForeignKey("UnderLipBottomId");

                    b.HasOne("PictIt.Models.Coords", "UnderLipTop")
                        .WithMany()
                        .HasForeignKey("UnderLipTopId");

                    b.HasOne("PictIt.Models.Coords", "UpperLipBottom")
                        .WithMany()
                        .HasForeignKey("UpperLipBottomId");

                    b.HasOne("PictIt.Models.Coords", "UpperLipTop")
                        .WithMany()
                        .HasForeignKey("UpperLipTopId");
                });

            modelBuilder.Entity("PictIt.Models.HairColor", b =>
                {
                    b.HasOne("PictIt.Models.Hair")
                        .WithMany("HairColor")
                        .HasForeignKey("HairId");
                });

            modelBuilder.Entity("PictIt.Models.Picture", b =>
                {
                    b.HasOne("PictIt.Models.Face", "Face")
                        .WithMany()
                        .HasForeignKey("FaceId");

                    b.HasOne("PictIt.Models.User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PictIt.Models.Search", b =>
                {
                    b.HasOne("PictIt.Models.User")
                        .WithMany("Searches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
